// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum LoR {
    LOCAL
    STATE
    REGIONAL
    NATIONAL
    INTERNATIONAL
}

enum GP {
    K9
    K10
    K11
    K12
    POSTGRADUATE
}

model User {
    id          String         @id @default(uuid()) @db.Uuid
    email       String         @unique
    name        String
    picture     String?
    admin       Boolean        @default(false)
    activities  Activity[]
    honors      Honor[]
    invitations Collaborator[] @relation("Invitations")
    invited     Collaborator[] @relation("Invited")
    cohorts     Cohort[]
}

model Collaborator {
    id        Int    @id @default(autoincrement())
    userId    String @db.Uuid
    invitedId String @db.Uuid
    user      User   @relation("Invitations", fields: [userId], references: [id], onDelete: Cascade)
    invited   User   @relation("Invited", fields: [invitedId], references: [id], onDelete: Cascade)
}

model Activity {
    id            String @id @default(uuid()) @db.Uuid
    userId        String @db.Uuid
    name          String
    description   String
    participation GP[]
    user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Honor {
    id                   String @id @default(uuid()) @db.Uuid
    userId               String @db.Uuid
    name                 String
    description          String
    level_of_recognition LoR
    grade_received       GP
    user                 User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Cohort {
    id             String    @id @default(uuid()) @db.Uuid
    userId         String    @db.Uuid
    name           String
    early_deadline DateTime?
    final_deadline DateTime?
    private        Boolean   @default(false)
    user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    essays         Essay[]
}

model Essay {
    id         String    @id @default(uuid()) @db.Uuid
    cohortId   String    @db.Uuid
    name       String
    prompt     String
    deadline   DateTime?
    brainstorm String?
    content    String?
    finalized  Boolean   @default(false)
    cohort     Cohort    @relation(fields: [cohortId], references: [id], onDelete: Cascade)
}
